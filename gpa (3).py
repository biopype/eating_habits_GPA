# -*- coding: utf-8 -*-
"""GPA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XkwFkM-1RUwXbtPNRmV-IJwUnc0GmGpG
"""

!pip install pandas

import pandas as pd
df = pd.read_csv('/content/food.csv')
df

df.columns

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Drop non-numeric columns before calculating the correlation
df_numeric = df.select_dtypes(include=[np.number])

# Calculate the correlation matrix
correlation_matrix = df_numeric.corr()

# Plot the correlation heatmap
plt.figure(figsize=(32, 28))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

# Plot the distribution of GPA
plt.figure(figsize=(10, 6))
sns.histplot(df['GPA'], kde=True, bins=20, color='skyblue')
plt.title('GPA Distribution')
plt.xlabel('GPA')
plt.ylabel('Frequency')
plt.show()

# Visualize relationship between total calories and GPA
plt.figure(figsize=(10, 6))
sns.scatterplot(x=df['calories_day'], y=df['GPA'], color='orange')
plt.title('Calories per Day vs GPA')
plt.xlabel('Calories per Day')
plt.ylabel('GPA')
plt.show()

# Map values in the 'breakfast' column
df['breakfast'] = df['breakfast'].map({1: 'Yes', 2: 'No'})

# Boxplot of breakfast vs GPA
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['breakfast'], y=df['GPA'], palette='coolwarm')
plt.title('Breakfast vs GPA')
plt.xlabel('Breakfast')
plt.ylabel('GPA')
plt.show()

# Boxplot of Gender vs GPA
df['Gender'] = df['Gender'].map({1: 'Male', 2: 'Female'})

plt.figure(figsize=(10, 6))
sns.boxplot(x=df['Gender'], y=df['GPA'], palette='Set2')
plt.title('Gender vs GPA')
plt.xlabel('Gender')
plt.ylabel('GPA')
plt.show()

# Boxplot of Exercise vs GPA
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['exercise'], y=df['GPA'], palette='magma')
plt.title('Exercise vs GPA')
plt.xlabel('Exercise Frequency')
plt.ylabel('GPA')
plt.show()

# Boxplot to check for outliers in GPA
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['GPA'], color='green')
plt.title('GPA Outliers Check')
plt.xlabel('GPA')
plt.show()

df['weight'] = pd.to_numeric(df['weight'], errors='coerce')

# Boxplot to check for outliers in total calories
plt.figure(figsize=(20, 6))
sns.boxplot(x=df['weight'], color='red')
plt.title('Weight Outliers Check')
plt.xlabel('Weight')
plt.show()

# Pairplot of selected numerical features
numerical_cols = ['GPA', 'Gender', 'breakfast', 'calories_day', 'weight', 'eating_out', 'exercise']  # Select relevant columns
sns.pairplot(df[numerical_cols])
plt.suptitle('Pairplot of Key Features', y=1.02)
plt.show()

"""How different features predict GPA, you can assess feature importance using a machine learning model (e.g., Random Forest)."""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame

# Convert non-numeric values in all columns (except GPA) to NaN
df = df.apply(pd.to_numeric, errors='coerce')

# Separate the features (X) and target (y)
X = df.drop(columns=['GPA'])
y = df['GPA']

# Fit a Random Forest model to estimate feature importance
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X, y)

# Get feature importance
importance = model.feature_importances_

# Visualize feature importance
features = X.columns
importance_df = pd.DataFrame({'Feature': features, 'Importance': importance})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importance
plt.figure(figsize=(10, 16))
sns.barplot(x='Importance', y='Feature', data=importance_df)
plt.title('Feature Importance')
plt.show()